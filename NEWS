v0.8.1
    * Fixed some string misbehavior.
    * LONG and ULONG types are now defined as [U]INT32 on Windows.
    * Added some *features*

v0.8.0
    * `Simple' and `:list' enum types now behave identically on conversion.
        I.e. now those types accept keywords, integers or lists of
        keywords/integers. On translation, :list types now return
        integer value as a first element of the list.
    * New function: CLEAR-CONST-CACHE. Deallocates all allocated constants
        (i.e. values converted with `const' type)
        You MUST call this function before saving a lisp image because
        all foreign pointers from previous lisp sessions become
        invalid.

v0.7.12
    * VOID constant has been redefined.
        Now it has a value of VIRGIL:VOID symbol.

v0.7.11
    * bug fix: Fixed primitives' definitions on x86-64

v0.7.10
    * bug fix: Fixed minor bug in union's translators.

v0.7.9
    * bug fux: Strongly-typed enum's translator was erroneous.

v0.7.8
    * bug fix: WITH-VALUE macro expansion in case of non-constant typespec
        was erroneous

v0.7.7
    * new feature: BOOLEAN typespec now accepts optional argument:
        a base type; which must be integral type.
        By default, base type is INT.
        Btw, BOOL is a CFFI's :boolean type wrapper.
    * Added CL:SINGLE-FLOAT and CL:DOUBLE-FLOAT as an aliases for SINGLE and
        DOUBLE correspondingly. Notice that SINGLE also has an alias FLOAT.

v0.7.6
    * Fixed run-time structure reader. Accessor function definiton lookup
        was replaced by eval, because in case of defstruct-defined structures
        we cannot guarantee that (SETF accessor) is a function.

v0.7.5
    * Changed private struct constructor's signature. Now it does not
        have any parameters.
    * Notice, that Clozure CL does not accept multiple `defstruct' constructors
        with equal signatures, so you should not define :constructor that
        does not have any parameters (i.e. (:constructor foo ())) if you
        want your code to be acceptable by CCL.

v0.7.4
    * bug fix: Fixed VOID constant definition on CCL

v0.7.3
    * bug fix: Wrapped VOID constant definition in LOAD-TIME-VALUE

v0.7.2
    * bug fix: Fixed strongly typed enum's PROTOTYPE and PROTOTYPE-EXPANSION
        methods

v0.7.1
    * bug fix: Fixed enum's translator expansion

v0.7.0
    * new feature: Enum types now have :LIST option. When this option is not
        NIL, enums are strongly typed, and in lisp they are represented as
        either a list of keywords or a single keyword.

v0.6.2
    * bug fix: Reading strings with output buffer supplied was
        erroneous and could result in output buffer overflow
    * optimization: Slightly optimized code generation for space

v0.6.1
    * improvement: CONST memory initialization is now happened during
        the allocation

v0.6.0
    * new feature: CONST types.
        Typespec syntax: (CONST type &optional (comparator 'equal))
        Where comparator ::= EQ | EQL | EQUAL | EQUALP
        Values of const types are allocated only once, and never deallocated
    * new feature: New macro: WITH-RAW-POINTERS
    * bug fix: Reference type translation was erroneous

v0.5.8
    * bug fix: Simple parser option in DEFINE-TRANSLATABLE-TYPE macro
        now specializes UNPARSE-TYPE function on type that is being defined

v0.5.7
    * new feature: Named structures and unions now allow documentation
        Example: (define-struct my-struct "This is my struct" (slot int))

v0.5.6
    * new feature: Lisp names of functions defined by DEFINE-EXTERNAL-FUNCTION
        can now be of form (SETF name)
    * optimization: Code generation, in places where it is necessary to check
        for circular reference mechanics state, was somewhat optimized
        for space.
    * bug fix: EXPAND-CLEANUP-VALUE now correctly calculates offsets for
        slots of unnamed structs and unions
    * bug fix: Compiler macro of CLEAN function was erroneous

v0.5.5
    * new feature: New functions and macros:
        ** RAW-ALLOC (size)
            Allocates SIZE bytes of foreign memory. That memory should be
            later deallocated with RAW-FREE
        ** RAW-FREE (pointer)
            Deallocates memory previously allocated by RAW-ALLOC
        ** WITH-RAW-POINTER ((var size &optional size-var) &body body)
            Allocates SIZE bytes of memory, binds VAR to it, optionally
            binds SIZE-VAR to the size of the allocated chunk and then
            executes BODY in dynamic environment. Finally, before leaving
            dynamic environment, memory designated by VAR pointer is
            deallocated, so that pointer is no longer valid.
            Notice, that if SIZE is constant expression, memory may be
            allocated on the stack.
        RAW-ALLOC and RAW-FREE are roughly identical to CFFI's foreign-alloc
        and foreign-free, except for SBCL, where they call malloc and free
        directly

v0.5.4
    * bug fix: READ-CSTRING with :OUT parameter supplied now respect
        length of that parameter

v0.5.3
    * bug fix: Immediate union's dynamic extent expansion now does cleanup
    * bug fix: Immediate unions are now converted correctly, even in case when
        one of the types in union is a reference type

v0.5.2
    * bug fix: BASE-TYPE incorrectly treated immediate unions and enums.
    * bug fix: Named union type definition was erroneous.

v0.5.1
    * Refactored circular reference handling and fixed some bugs, particulary
        with deallocation of circular structures.
    * new feature: Struct and union types now may have user-defined readers,
        writers, cleaners, allocators and deallocators. Those are described
        using structure options described below.
        Either of those options may be a valid function name,
        NIL or :DEFAULT. The last two cases designate that Virgil should use
        its default handler for corresponding operation.
        ** :ALLOCATOR - a function of one argument, a value to be allocated.
            Allocator should allocate some system memory, and return a pointer
            to that memory, but should NOT write contents of value into it.
        ** :DEALLOCATOR - a function of one argument, a pointer to memory
            that should be deallocated.
        ** :READER - a function of two arguments, a pointer to read from, and
            a structure to which contents of the memory should be written.
            The second parameter may be NIL, and in this case reader function
            should allocate new lisp structure. The function should return
            the structure described.
        ** :WRITER - a function of two arguments, a structure that should be
            written and a pointer at which the structure should be written.
            This function should return the structure that is written.
        ** :CLEANER - a function of two arguments, a pointer to memory that
            should be cleaned, and a structure, that was previously written
            to that memory. The function should, for example, free internal
            pointers in the raw-memory representation of the structure, but
            should NOT free the pointer itself. The function's return value
            is ignored.

v0.5.0
    * new feature: Recursive data structures.
        Named structure types can now hold references to themselves
        in their slots.
        ** Notice, that recursive data _types_(those defined with defalias)
           are not allowed. The reasons for this are quite complex, but one of
           them is that our type system is very similiar to that of CL.
    * new feature: Circular reference handling.
        Virgil is now able to read circular structures from memory,
        write this kind of structures into it, and so on.
        However, the process of tracing circular references
        has significant performance impact, and because of this,
        is disabled by default and requires explicit activation by means
        of those macros and functions:
        ** WITH-CIRCULAR-REFERENCES locally enables circular reference tracing
        ** WITHOUT-CIRCULAR-REFERENCES locally disables tracing
        ** ENABLE-CIRCULAR-REFERENCES enables tracing of circular references
            in current dynamic environment (either global or established by
            the macros described above)
        ** DISABLE-CIRCULAR-REFERENCES disables tracing of circular references
            in current dynamic environment
        ** CLEAR-CIRCULAR-REFERENCE-CACHE clears internal cache in current
            dynamic environment
    * improvement: Structures are now more defstruct-like: they can have
        more than one constructor.

v0.4.0
    * bug fix: Named enums were treated as aggregate types
    * incompatible changes: All types were reorganized into new hierarchy:
        ** All types that were defined with either DEFINE-PRIMITIVE-TYPE,
            DEFINE-IMMEDIATE-TYPE, DEFINE-PROXY-TYPE, or
            DEFINE-TRANSLATABLE-TYPE are translatable types
        ** Core generics were specialized on T for type parameter.
            In this case they will throw error and report that supplied type
            is not a translatable type
        ** All primitive types are now immediate types
        ** All types that are not immediate, are now treated as aggregate.
            DEFINE-AGGREGATE-TYPE was renamed to DEFINE-TRANSLATABLE-TYPE
    * improvement: Few tests added

v0.3.0
    * new feature: Immediate union types. When all types in union are
        either primitive or immediate, union type also will be treated
        as immediate type.

v0.2.6
    * :UNDERSCORE name translator was renamed to :SNAKE-CASE
    * improvement: Specialized MAKE-LOAD-FORM on VOID
    * bug fix: Specialized EXPAND-REFERENCE-DYNAMIC-EXTENT on
        aggregate filtered types

v0.2.5
    * new feature: FILTERED types. This is the new kind of proxy types.
        Typespec syntax: (FILTERED type predicate handler) where 'predicate'
        and 'handler' must be the names of one-argument functions.
        Filtered types call their predicate just after translation/reading
        of value or just before it's conversion/writing. Unless value
        matches the predicate, filtered type's handler is applied to it
    * improvement: BASE-TYPE has been specialized on primitive types:
        It simply returns them as they are

v0.2.4
    * improvement: :CONC-NAME option with value of NIL in named enums
        and structures is now treaten as empty conc-name
    * improvement: Constant expressions in enum values are now allowed

v0.2.3
    * bug fix: fixed minor bug in EXPAND-CLEAN-VALUE default method
    * bug fix: DEFINE-CALLBACK body was unable to hold declarations

v0.2.2
    * optimization: optimized aligned pointer computation for strictly
        aligned types

v0.2.1
    * bug fix: specialized UNPARSE-TYPE on strictly aligned types

v0.2.0
    * new feature: Proxy types. Can be defined with DEFINE-PROXY-TYPE.
        Proxy types behave just the same as their proxied types,
        until you specialize one of the core generics on them.
        Proxied type of proxy type can be obtained by PROXIED-TYPE function.
        MAKE-INSTANCE's initarg for proxied type of proxy type is :TYPE
    * new feature: Type predicates.
        ** PRIMITIVE-TYPE-P
        ** IMMEDIATE-TYPE-P
        ** AGGREGATE-TYPE-P
        ** PROXY-TYPE-P
    * new feature: New core generics.
        ** COMPUTE-SLOT-OFFSET computes the offset of aggregate type's slot.
            For now it is specialized only on structure types, but this may
            change in the future.
        ** EXPAND-COMPUTE-SLOT-OFFSET is compile-time analogue of
            COMPUTE-SLOT-OFFSET and can be specialized
            for optimization purposes
    * enchancement: OFFSETOF and it's compiler macro now rely on
        COMPUTE-SLOT-OFFSET and EXPAND-COMPUTE-SLOT-OFFSET
    * new feature: Strictly aligned types. This kind of types can be
        represented by ALIGNED typespec. Syntax: (ALIGNED alignment type)
        Values of strictly aligned types are always allocated on
        boundaries that comply certain alignment.

v0.1.6
    * new feature: new options in DEFINE-IMMEDIATE-TYPE and
        DEFINE-AGGREGATE-TYPE macros. Like most other options, they are just
        shortcuts for defining methods of appropriate generic functions.
        ** :ALLOCATOR defines method of ALLOCATE-VALUE
        ** :DEALLOCATOR - FREE-VALUE
        ** :ALLOCATOR-EXPANSION - EXPAND-ALLOCATE-VALUE
        ** :DEALLOCATOR-EXPANSION - EXPAND-FREE-VALUE
    * optimization: EXPAND-ALLOCATE-VALUE and EXPAND-FREE-VALUE have been
        specialized on built-in types

v0.1.5
    * bug fix: Primitive types' EXPAND-PROTOTYPE could result in value
        that lisp compilers are unable to dump into fasls
    * bug fix: Primitive types' EXPAND-FREE-VALUE always returned NIL
    * bug fix: Invalid initarg to named enum type's constructor
    * bug fix: Some lisp implementations (e.g. clisp) doesn't allow
        function names to be symbols w/o package (well, not exactly
        disallow, but in this case that functions names and hence functions
        are simply lost after the compilation stage)

v0.1.4
    * CLEANUP-VALUE and EXPAND-CLEANUP-VALUE are renamed to
        CLEAN-VALUE and EXPAND-CLEAN-VALUE
    * ALLOCATE-VALUE and FREE-VALUE are now generic functions
        ** ALLOCATE-VALUE allocates memory for value of specified type
            (but does not write the contents of the supplied value into it)
        ** FREE-VALUE frees allocated memory
            (but does NO CLEANUP! Use CLEAN-VALUE first)
        ** There are also EXPAND-ALLOCATE-VALUE and EXPAND-FREE-VALUE
    * new features: ALLOC, CLEAN, FREE and CLEAN-AND-FREE functions
        ** ALLOC allocates memory and writes contents of supplied value
            into it (if the value is supplied. Otherwise it writes contents
            of type's PROTOTYPE)
        ** CLEAN does memory cleanup for the specified type
            (frees internal pointers in structures, for expample)
            but does not free supplied pointer. It requires lisp-level value
            of that type to be supplied because memory blocks
            allocated for that type may be of(non-fixed) size that
            depends on that value.
        ** FREE frees memory allocated to specified type
        ** CLEAN-AND-FREE does exactly what you think.

v0.1.3
    * Updated TODO
    * new features: New pointer arithmetic functions:
        ** &p (predicate for pointer)
        ** &= (test for pointer address equality)
        ** && (gets pointer address)

v0.1.2
    * Function STRUCT-SLOT-OFFSET was renamed to OFFSETOF
        (syntax: OFFSETOF struct-type-name member-name)
    * new feature: New primitive types:
        CHAR-T, UCHAR-T, WCHAR-T and PTRDIFF-T
    * enchancement: Improved translation of CFFI's integral types into
        those of Common Lisp
    * bug fix: Base type of CHAR type is now UCHAR-T, not SBYTE, and
        that of WCHAR is now WCHAR-T, not USHORT
    * bug fix: SBYTE and UBYTE are now aliases
        for INT8 and UINT8 correspondingly

v0.1.1
    * TRIVIAL-FEATURES added to the list of dependencies
    * enchancement: New interfaces - WITH-VALUE and WITH-VALUES

v0.1.0
    * Initial release
